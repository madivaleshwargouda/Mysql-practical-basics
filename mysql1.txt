drop database school;
show databases;
create database school;
use school;

============>>>> CONSTRAINTS roles

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly


============>>>> 1)PRIMARY KEY

create table students(
SID integer,
Sname varchar(30),
Branch varchar(30),
Perc float,
Primary key (SID));

describe students;
show table status;
show tables;

insert into students(SID, Sname, Branch, Perc)
values
(10, "mahesh", "EC", 80),
(20, "bacha", "vv", 55),
(30, "nanu", "cv", 77),
(40, "ninu", "ee", 75),
(50, "man", "cs", 80);

select * from students;
insert into students values(70,"mahesh", "jh", 88); // Its working

insert into students values(70,"mahesh", "jh", 88); // primary key is not accespt duplicate entry

insert into students values("mahesh", "jh", 88); // Its not working becouse compulsorys primary key should be give


============>>>> 2) NOT NULL

create table students(
SID integer,
Sname varchar(30),
Branch varchar(30),
Perc float not null,
Primary key (SID));

insert into students(SID, Sname, Branch, Perc)
values
(10, "mahesh", "EC", 80),
(20, "bacha", "vv", 55),
(30, "nanu", "cv", 77);

select * from students;

insert into students(SID, Sname, Perc) values (60,"mahesh",40); /// Its working

insert into students values (60,"mahesh","hfh",40);  /// its working

insert into students values (60,"mahesh","hfh");  /// its not working because compulsorys primary key and NOT NULL should be give


============>>>> 3) Check

create table students(
SID integer,
Sname varchar(30),
Branch varchar(30),
Perc float not null,
Age integer,
check (Age > 18),   /////// check constraint is used to limit the vlue range that can be placed in a column.
Primary key (SID));

describe students;

insert into students(SID, Sname, Branch, Perc, Age)
values
(10, "mahesh", "EC", 80 , 20),
(20, "bacha", "vv", 55, 19),
(30, "nanu", "cv", 77, 21);

select * from students;

select * from students;
insert into students(SID, Sname, Branch,Age) values (75,"mahesh","mj", 17); /// its doesn't work because check is > 18 . 


============>>>> 4) Default

Default is a constraint in sql which allows users to fill a column with the defauilt or fixed value.

create table students(
SID integer,
Sname varchar(30),
Branch varchar(30),
Perc float not null,
Age integer,
college_name varchar(30) default 'bvb', ///default value BVB
check (Age > 18),
Primary key (SID));


============>>>>  5)foreing key

The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.

create table students(
SID integer,
Sname varchar(30),
Brach varchar(30),
CID integer,
primary key (SID),
foreign key(CID) references cource(CID));

create table cource(
CID integer,
Sname varchar(30),
primary key(CID));

select * from students;
desc students;
select * from cource;
desc cource;
show tables;

============>>>>   ALTER COMMAND IN SQL

(ADD, DROP, MODIFY DATATYPE, ADD CONSTRAINT UNIQUE, DROP CONSTRAINT UNIQUE[CONSTRAINTS ROLES])

=> DDL Command (data definition language)
=>To change the shcema/Structure of database

* ADD column
* Delete column
* Modify datatype of existing column
* set constraints link NOT NULL, PRIMARY KEY, UNIQUE KEY etc...
* Remove constraints


create table student
(sid integer,
sname varchar(30),
perc integer);

show tables;

============>>>> ADD COLUMN

Alter table student
add age integer;

============>>>> DROP COLUMN

alter table student
drop column age;

desc student;

============>>>> MODIFY DATATYPE

alter table student
modify column perc float;

============>>>> ADD NOT NULL

alter table student
modify perc float not null;

============>>>> ADD CONSTRAINT UNIQUE

alter table student
add email varchar(50);

alter table student
add constraint unique(email);
 
============>>>> ADD PRIMARY KEY CONSTRAINT

alter table student
add constraint primary key(table_name);

ADD Constraint Check

alter table student
add age integer;

alter table student
add constraint check (age>18)

============>>>> DROP CONSTRAINT

 ALTER TABLE STUDENT
DROP INDEX EMAIL;


============>>>> DROP CONSTRAINT UNIQUE(primary key)

alter table student
drop index email;
drop primary key

NOTE:::::=>

============>>>>  DROP and TRUNCATE

** DROP => Drop command is used to delete the complete 
           table from the database.

** TRUNCATE => truncate command will delete the data from the table 
               not the table the data from the table. 


drop table student;   ///delete the table from the database.

truncat table student; ///delete the data from the table.



============>>>>  SELECT (DML)DATA MANIPULATION LANGUAGE

You want to get the data from the table.

SELECT * FROM TABLE_NAME
WHERE CONDITION
ORDER BY COLUMN_NAME;

=> * Display all condition columns

=>SELECT column1,columan2 FROM table_nmae;        
         |  
          ----> perticular columns will be disply on the result.



=> WHERE CONDTION (simple and compound)

=> Relation opertion (=, <>, <, >, >=, <=) that we call it as a condtion.

=> compound (and, or, not)

============>>>> LIKE --> Search for pattern  /// Pattern so that mewans if you want to get 
 				                  the details of n employees or a students whose 
				                  name starts with some character so that is a pattern

============>>>>IN ---> ( search in multiple values)   In means will givea multiple values and if the condtion satisfies with 
	                                        those values the result will be displayed.

============>>>>BETWEEN --->  (Search in a renge) Between means the name itself indicates will give such inner range.

# BETWEEN = Between a certain range
# LiNk = Search for a pattern
# IN = To specify multiple possible values for a column

============>>>> ORDER BY
 
=> ascending order or a descending order

=============>>>>SELECT DISTINCT /// without repetition what are the values 
 ex = select distinct * from table_name;

Example--->
 
create table students(
sid integer,
sname varchar(30),
branch varchar(30),
perc float,
primary key(sid));

# desc students;

insert into students(sid, sname, branch, perc)
values
(1, "mahesh", "EE", 88),
(2, "ravi", "cv", 87),
(3, "basu", "EE", 99),
(4, "mahesh", "EC", 75),
(5, "nanu", "CS", 66),
(6, "mahe", "IS", 88);

1)   SELECT column1,column2,....
     FROM table_name
     WHERE condition;

# select *from students;
# Select Distinct sname from students; 

# select * from students
  where perc > 70;

2)   SELECT column1,column2,....
     FROM table_name
     WHERE condition1 AND condition2 AND condition3,,; 

# select *from students
  where perc>70 AND sid>4;

3)   SELECT column1,column2,....
     FROM table_name
     WHERE condition1 OR condition2 OR condition3,,; 

# select *from students
  where perc>70 OR sid>4;

4)   SELECT column1,column2,....
     FROM table_name
     WHERE NOT condition;

# select *from students;
  where NOT perc> 80;

5)   SELECT column1,column2,....
     FROM table_name
     ORDER BY column1, column2,..... ASC|DESC; 

# select * from students
  order by sname;

# select * from students
  order by sname desc;

# select * from students
  order by sname asc;

6)   SELECT column_name
     FROM table_name
     WHERE condition
     LIMIT number;

# select * from students
  where perc>80 LIMIT 3;

# select perc from students
  where sid=5;

# select * from students
  order by perc desc limit 3;

# select * from students
  order by perc asc limit 3;
  
7)   SELECT column_name
     FROM table_name
     WHERE column_name LINK pattern;

# select * from students
  where sname LINK 's%';


# select * from students
  where sname LINK '%EE%';


8)   SELECT column_name
     FROM table_name
     WHERE column_name IN (value1, value2, ...);

# select * from students
  where perc In (25, 58, 25);

8)   SELECT column_name
     FROM table_name
     WHERE column_name BETWEEN value1 AND value2;

# select * from students
  where perc between 25 AND 80;




====================>>>>>UPDAE and DELETE

UPDATE =  used to modify the existing data //modify single row or multiple rows 
	= DML

update table_name
set column1=value, column2=value,......
where =condition;


DELETE = used to delete specific rows from table
	= DML (drop and truncate)

syntax
delete from table_nmae
where condition;          /////delte specific rows

delete from table_name;    //// delete all the rows


example;;

update students
set perc=95
where sname='mahesh';

update students
set grade="pass" 
where perc>35 and perc<60;

update students
set grade="First class" 
where perc>60 and perc<90;

update students
set grade="Distinction" 
where perc>90;

DELETE from student 
where grade="pass";

DELETE from student 
where grade="first class";

delete from students; ///all delete records



================ AGGREGATE FUNCTION SQL

# COUNT() = count of value of an attribute
# SUN()   = Numerical values (sum of all values of an attribute)
# AVG()   = Average of all values
# MIN()   = Minimum value of an attribute
# MAX()   = Maxmum value of an attribute

example;;;;

select count(sname) 
from students;

select count(perc) 
from student;

select count(*) 
from students;

select sum(perc) 
from students;

select avg(perc) 
from students;

select min(perc) 
from students;

select max(perc) 
from students;



===========================>>>>> GROUP BY and HAVING

# these clauses  will be used in SELECT(select command it used to
  retreive the data from the table) command

GROUP BY 

*Group the row based on column
*Aggregate function

HAVING

*Aggregate function
* condition on result of group by class 

syntx

SELECT * FROM TABLE_NAME
GROUP BY column1, column2,.....

SELECT * FROM TABLE_NAME
GROUP BY column1,column2,... 
HAVING condition;


create table students(
SID integer,
Sname varchar(30),
Perc float,
gender varchar(10),
Branch varchar(30),
Primary key (SID));

insert into students(sid, sname, branch, perc)
values
(1, "mahesh", 88, "M", "EE"),
(2, "ravi", 80, "M", "cv"),
(3, "basu", 90, "M", "EE"),
(4, "mahesh", 70,"M", "EC",),
(5, "nani", 91,"F", "CS",),
(6, "mahe", 88,"F", "IS");

task:=
	GROUP BY ClASS

# Finding number of students branch_wise
	select branch,count(sid)
	from students
	group by branch;

# finding of male students and female students
	select gender,count(sid) 
	from students 
	group by gender;

# Finding average percentage of male students and female students
	select gender,avg(perc) 
	from students 
	group by genders; 

# Finding maximum percentage from male and female students
	select gender,max(perc) 
	from students 
	group by gender;
	select branch,max(perc) 
	from students 
	group by branch;

# Finding minimu percentage from male and female students
	select gender,min(perc) 
	from students 
	group by gender;

	HAVING CLASS

# Finding braches having only one students
	select branch,count(branch)
	from students
	group By branch
	having count(sid)=1;

# Finding branches having more then one students
	select branch,count(branch)
	from students
	group By branch
	having count(sid)>1;

# Finding branches in which students having minimu percentage is greater than 70
	select branch,min(perc)
	from students
	group By branch
	having min(perc)>70;


# Finding branches in which students having maximum percentage is greater than 90
	select branch,max(perc)
	from students
	group By branch
	having max(perc)>90;



=========================Examples=====

Sailors  ->sid, sname, rating,age
Boat     ->Bid, Bname, color
Reserver ->sid, bid, resrve_date (primary key, foreing)

create table sailors(
sid integer,
sname varchar(30),
rating integer,
age integer,
primary key(sid));

# show tabels;

insert into sailors values
(101,"sundeep",9,25),
(102,"saradhi"10,26),
(103,"rajesh"8,28),
(104,"ramu",6,22),
(105,"hari"6,28),
(106,"siva"10,30);

# select * from sailors;
[O
create table boats(
bid integer,
bname varchar(30),
color varchar(30),
primary key(bid));

# show tables;

insert into boats values
(1,"boat1","green"),
(2,"boat2","red"),
(3,"boat3","blue"),
(4,"boat4","gold"),
(5,"boat5","black");

# select *from boats;


create table reserves(
sid integer,
bid integer,
day date,
primary key(sid,bid),
foreign key(sid) references sailors(sid),
foreign key(bid) references boats(bid));

# show tables;

insert into reserves values
(101,1,20230105),
(102,2,20230115),
(103,3,20230120),
(104,4,20230201),
(105,5,20230225),
(105,1,20220120),
(103,4,20220120);

# select * from reserver;


# Finding name and sailor who reserved boat no.3?
	select sname from sailors,reserves
	where sailors.sid=reserves.sid and bid=3;


# finding name and sailor who reserves red boat?
	select sname from sailors,reserves,boats
	where sailors.sid=reserves.sid and 
	reserves.bid=boats.bid and 
	boats.color="red";


# finding color and boats reserver by "sundeep"?
	select color from boats,reserves,sailors
	where boats.bid=reserves.bid and 
	reserves.sid=sailors.sid and
	sailors.sid and sailors.sname="sundeep";


# finding name and sailors who have reserved alteast one boat?
	select sname from sailors,reserves,boats
	where sailors.sid=reserves.sid and 
	reserves.bid=boats.bid;

# delete from reserves 
  where sid=104;

# select distinct sname from sailors,reserves,boats
  where sailors.sid=reserves.sid and reserves.bid=boats.bid;


=========================VIEWS=======

# view is virtual table constructed from existing tables
	existing table can be from the single table or multiple table	

#changes made in table reflects on view
#changes made in view reflects on table.

exmple;
 
clg(DB)-->[(view)cs, (view)ece, (view)eee, (view)mech, (view)civil]


Syntax

SQL>	CREATE VIEW view_name AS
	SELECT column1,column2,... FROM table1
	WHERE condition;


SQL>	CREATE VIEW view_name AS
	SELECT column1,column2,... FROM table1,table2,...
	WHERE table1.cul_name=Table2.cul_name AND condition;



create table students(
SID integer,
Sname varchar(30),
Perc float,
gender varchar(10),
Branch varchar(30),
Primary key (SID));

insert into students(sid, sname, branch, perc)
values
(1, "mahesh", 88, "M", "EEE"),
(2, "ravi", 80, "M", "CV"),
(3, "basu", 90, "M", "EEE"),
(4, "mahesh", 70,"M", "ECE",),
(5, "nani", 91,"F", "CS",),
(6, "mahe", 88,"F", "IS");
(7, "mahesh", 88, "M", "EEE"),
(8, "rava", 80, "M", "CV"),
(9, "bas", 90, "M", "EEE"),
(10, "maha", 70,"M", "ECE",),
(11, "nanii", 91,"F", "CS",),
(12, "mahes", 88,"F", "IS");


select * from students;

   CREATE VIEW EEE_students AS
-> select * from students 
   where branch='EEE';

SELECT * FROM EEE_STUDENTS;


   CREATE VIEW CS_STUDENTS AS
-> SELECT * FROM STUDENTS 
   WHERE BRANCH='cs';
	
SELECT * FROM cs_STUDENTS;


   CREATE VIEW IS_STUDENTS AS
-> SELECT * FROM STUDENTS 
   WHERE BRANCH='IS';

SELECT * FROM IS_STUDENTS;

   CREATE VIEW CV_STUDENTS AS
-> SELECT * FROM STUDENTS 
   WHERE BRANCH='CV';

SELECT * FROM CV_STUDENTS;


   CREATE VIEW ECE_STUDENTS AS
-> SELECT * FROM STUDENTS 
   WHERE BRANCH='ECE';

SELECT * FROM ECE_STUDENTS;

show table;


UPADE STUDENTS
SET PERC=95
WHERE sid=3;

select * from students;
select * from EEE_students;  

# when we are updating the attribute from the master table it should be
  reflected on the VIEW also so here EEE student is view so we are 
  changing the value in the master table it was reflected on the VIEW.

VIEW to Master reflecte

Upadte EEE_students
set perc=99
where sid=3;

select * from EEE_students;
select * from students;


#If you are doing any manipulation in the master table it 
 will be reflecter on the view.

EXAMPLE;

create table contacts
(sid integer,
email varchar(30),
mobile integer,
primary key(sid),
foreign key(sid) references students(sid));

insert into contacts values
(1, "mahesh@kkff", 5885554),
(2, "ravi@fhdf", 5885566),
(3, "basu@hfhfh", 5558455),
(4, "mahes@jdjj", 122554);

select * from contacts;

Create view student_contacts AS
select students.sid,students.sname,contacts.email,contacts.mobile
from students,contacts
where students.sid=contacts.sid;

create view students_contacts as
select students.sid,students.sname,students.branch,students.perc,contacts.email,contacts.mobile
[Ifrom students,contacts
where students.sid=contacts.sid;

show tables;
select * from students_contacts;

drop view students_contacts;


create view students_contacts as
select students.sid,students.sname,students.branch,contacts.email,contacts.mobile,students.perc
from students,contacts
where students.sid=contacts.sid;











