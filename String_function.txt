what is RDS Relational database serviceis a web service that make it 
easier to set up, operate and relational database in the cloud

How many types of RDS are there in AWS?
MYSQL, MariaDB, Oracle Database and SQL, Amazon Aurora

================  SQL COMMAND
DDL(Data definition Language)= create, drop, alter, truncate
	Create =it is used to create a new table in the database.
	Drop   =It is used to delete both the structure and record stored in the tsble.
	ALter = It is used to alter the structure of the database.
	        ALTER TABLE table_name ADD column_name COLUMN-definition;

	truncate = it is used to delete all the rows from the table and free
		    the space containing the table.

DML(Data manipulation language)= Insert, update, Delete
	 INSERT: The INSERT statement is a SQL query. It is used to insert 
		data into the row of a table.
	 UPDATE: This command is used to update or modify the value
		 of a column in the table.
	 DELETE: It is used to remove one or more row from a table.

DCL(Data control language)= grant, revoke
	Grant: It is used to give user access privileges to a database
	Revoke: It is used to take back permissions from the user.

TCL(Transaction control language)= commit, rollback, save point
	Commit: Commit command is used to save all the transactions to 
		the database.
	Rollback: Rollback command is used to undo transactions that have 
		not already been saved to the database.
	SAVEPOINT: It is used to roll the transaction back to a certain point 
		without rolling back the entire transaction.

DQL(Data query language)= Select
	SELECT: This is the same as the projection operation of relational algebra.





CRUD


*What is a Database?
-> A collection of data (ex: a phone book)
-> A method for accessing and manipulation that data
*SQL and MYSQL

*Creating Databases abd tables
 creating databases
 mysql -u root -p (installtion on server)
 
 show databases;  ///to list available databases:
 create datatbase <name>; // creating a databases:
 
 Drop database <data_name>; /// drop(delete) databases:
 
 USE <databases_name>;  /// to use database:


NUMERIC TYPE

-> INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT, DECIMAL,
   NUMBER, FLOAT, DOUBLE, BIT

STRING TYPES

-> CHAR, VARCHAR, BINARY, VARBINARY, BLOB, TINYBLOB, MEDIUMBLOB.
   LONGBLOB, TEXT, TINYTEXT, MEDIUMTEXT, LONGTEXT,ENUM

DATE TYPES

-> DATE, DATETIME, TIMESTAMP, TIME


* create table <table_name> ();
* show tables;
* select * from <table_name>;
* show columns from <table_name>; or DESC(discribe) <table_name>; // viwe detials of (table)
* drop table <table_name>;  ///Delete the whole <table_name>table

*Inserting Data

*insert into <tablename> () values ();

ex; insert into <tablename> (name) values ('nani/s') ///nani's


Define a table with a DEFAULT name specified:

CREATE TABLE cats3  (    
    name VARCHAR(20) DEFAULT 'no name provided',    
    age INT DEFAULT 99  
)

Combine NOT NULL and DEFAULT:

CREATE TABLE cats4  (    
    name VARCHAR(20) NOT NULL DEFAULT 'unnamed',    
    age INT NOT NULL DEFAULT 99 
);


Defining employees table

CREATE TABLE employees (
    id INT AUTO_INCREMENT,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed',
    PRIMARY KEY(id)
);
-- Another way of defining the primary key:



CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed'
);
-- A test INSERT:



INSERT INTO employees(first_name, last_name, age) VALUES
('Dora', 'Smith', 58);


========	CURD  BASICS

 Create
 READ    //select [(*) read all columns] from <table_name>;
 Update
 Delete


	 Aliases (AS)  
///Use 'AS' to alias a column in your results (it doesn't
 actually change the name of the column in the table)

 select name AS kittyname from <table_nmae>;
 select cat_id AS id, name from <table_nmae>;

======UPDATE

UPDATE <table_nmae>
SET <columns_name> = chenge condtion
WHERE condtion;

ex; UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';

=======DELETE 

-- Delete all <Table_name> with name of 'Egg':

DELETE FROM cats WHERE name='Egg';

-- Delete all rows in the <table_name>:

DELETE FROM cats;


CREATE DATABASE shirts_db;
 
USE shirts_db;
 
CREATE TABLE shirts (
    shirt_id INT AUTO_INCREMENT PRIMARY KEY,
    article VARCHAR(50),
    color VARCHAR(50),
    shirt_size VARCHAR(5),
    last_worn INT
);
 
DESC shirts;
 
INSERT INTO shirts (article, color, shirt_size, last_worn)  
VALUES 
	('t-shirt', 'white', 'S', 10),
	('t-shirt', 'green', 'S', 200),
	('polo shirt', 'black', 'M', 10),
	('tank top', 'blue', 'S', 50),
	('t-shirt', 'pink', 'S', 0),
	('polo shirt', 'red', 'M', 5),
	('tank top', 'white', 'S', 200),
	('tank top', 'blue', 'M', 15);
 
INSERT INTO shirts (article, color, shirt_size, last_worn)
VALUES ('polo shirt','purple', 'M', 50);


SELECT article, color FROM shirts;
 
SELECT * FROM shirts WHERE shirt_size='M';
 
SELECT article, color, shirt_size, last_worn FROM shirts WHERE shirt_size='M';

UPDATE shirts 
SET 
    shirt_size = 'L'
WHERE
    article = 'polo shirt';
    
    
UPDATE shirts 
SET 
    last_worn = 0
WHERE
    last_worn = 15;
    
    
UPDATE shirts 
SET 
    color = 'off white',
    shirt_size = 'XS'
WHERE
    color = 'white';



SELECT * FROM shirts WHERE last_worn=200;
 
DELETE FROM shirts WHERE last_worn=200;
 
 
SELECT * FROM shirts WHERE article='tank top';
 
DELETE FROM shirts WHERE article='tank top';
 
 
 
SELECT * FROM shirts;
 
DELETE FROM shirts;
 
 
 
 
DROP TABLE shirts;
 
 
show tables;
 
DESC shirts;


=====================    String Function  ============

*CONCAT

*SUBSTRING

*REPLACE

*REVERSE

*CHAR_LENGTH

* UPPER & LOWER


CREATE TABLE books 
	(
		book_id INT AUTO_INCREMENT,
		title VARCHAR(100),
		author_fname VARCHAR(100),
		author_lname VARCHAR(100),
		released_year INT,
		stock_quantity INT,
		pages INT,
		PRIMARY KEY(book_id)
	);
 
INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
VALUES
('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);



=====    CONCAT (string fuction)

The CONCAT function combines the text from multiple ranges and/or strings


SELECT CONCAT('pi', 'ckle');
output /// Pickle
 
SELECT CONCAT('pi', ' ' ,'ckle');
output /// Pic kle
 
SELECT CONCAT(author_fname,' ', author_lname) AS author_name FROM books;
output /// author_fname author_lname
 
SELECT CONCAT_WS('-',title, author_fname, author_lname) FROM books;
output /// title-author_fname-author_lname

SELECT CONCAT('-',title, author_fname, author_lname) FROM books; //without ws
output /// -titleauthor_fnameauthor_lnam


===========    SUBSTRING (string function)

SUBSTRING in SQL is a function used to retrieve characters from a string


SELECT SUBSTRING('Hello World', 1, 4);
o/p // hell
 
SELECT SUBSTRING('Hello World', 7);
o/p // world
 
SELECT SUBSTRING('Hello World', -3);
o/p // rld 

SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;
 
SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;


Combing string function

SELECT CONCAT
    (
        SUBSTRING(title, 1, 10),
        '...'
    ) AS 'short title'
FROM books;

Example:->

SELECT CONCAT(
	SUBSTR(author_fname, 1,1), '.', SUBSTR(AUTHOR_LNAME, 1, 1), ','
	) AS author_initials
	FROM books;


===REPLACE
The REPLACE() function replaces all occurrences of a substring within a string, with a new substring.


SELECT REPLACE('Hello World', 'Hell', '%$#@');
o/p //hell
 
SELECT REPLACE('Hello World', 'l', '7');
 
SELECT REPLACE('Hello World', 'o', '0');
 
SELECT REPLACE('HellO World', 'o', '*');
 
SELECT
  REPLACE('cheese bread coffee milk', ' ', ' and ');
o/p // cheese and bread and coffee milk
 
SELECT REPLACE(title, 'e ', '3') FROM books;
 
SELECT REPLACE(title, ' ', '-') FROM books;
o/p // the-namespace



========REVERSE
The REVERSE() function reverses a string and returns the result


SELECT REVERSE('Hello World');
o/p /// olleh dlrow


====== CHAR_LENGTH
SELECT LENGTH('Hello World');
O/P ////15

SELECT CHAR_LENGTH('Hello World');
O/P //// 2
 
SELECT CHAR_LENGTH(title) as length, title FROM books;
 
SELECT author_lname, CHAR_LENGTH(author_lname) AS 'length' FROM books;
 
SELECT CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') FROM books;


========UPPER AND LOWER case

SELECT UPPER('Hello World');
O/P /// HELLO WORLD
 
SELECT LOWER('Hello World');
O/P ///hello world

 
SELECT UPPER(title) FROM books;
 
SELECT CONCAT('MY FAVORITE BOOK IS ', UPPER(title)) FROM books;
 
SELECT CONCAT('MY FAVORITE BOOK IS ', LOWER(title)) FROM books;


INSERT
SELECT INSERT('Hello Bobby', 6, 0, 'There'); 
 
LEFT
SELECT LEFT('omghahalol!', 3);
 
RIGHT
SELECT RIGHT('omghahalol!', 4);

REPEA 
SELECT REPEAT('ha', 4);
 
TRIM
SELECT TRIM('  pickle  ');










